"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["tasks"],{

/***/ "./src/localstorage.js":
/*!*****************************!*\
  !*** ./src/localstorage.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* \nlocalStorage.setItem() to create a new key-value pair\nlocalStorage.getItem() to retrieve the value of a key\nlocalStorage.removeItem() to remove a specific pair\nlocalStorage.clear() deletes ALL saved pairs for that domain \n*/\n\nconst localStorage = (() => {\n    function addToStorage(obj){\n        this.obj = obj; //should have title, details, dueDate, priority (low, medium, high), data-task-index\n        window.localStorage.setItem('projects', JSON.stringify(obj));\n        console.log(`projects added to storage: ${(getFromStorage('projects'))}`); \n        console.table(getFromStorage('projects'))/* Task: ${this.obj.title} has been added to storage with key: ${this.obj.index} */\n    }\n    function getFromStorage(key){\n        return window.localStorage.getItem(key);\n    }\n    function deleteFromStorage(key){\n        window.localStorage.removeItem(key);\n    }\n    function clearStorage(){\n        window.localStorage.clear();\n    }\n    return {\n        addToStorage,\n        getFromStorage,\n        deleteFromStorage,\n        clearStorage\n    };\n})();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (localStorage);\n\n//# sourceURL=webpack:///./src/localstorage.js?");

/***/ }),

/***/ "./src/projects.js":
/*!*************************!*\
  !*** ./src/projects.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _localstorage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localstorage.js */ \"./src/localstorage.js\");\n\n// import tasks from './tasks.js'\n\nconst projects = (() => {\n    let projectsList = [];\n    class Project {\n        constructor(title, id){\n            this.title = title;\n            this.id = id;\n            this.taskArr = [];\n        }\n    }\n    //Load some default projects from local storage for testing\n    if(_localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getFromStorage('projects')=== null){\n        projectsList = \n        [\n            {\n                title: 'Testing Project 1',\n                id: 0,\n                taskArr: [\n                    {\n                        title: 'test task 1 proj 1',\n                        details: 'random assortment of details',\n                        dueDate: '2/28/2023',\n                        priority: 'low',\n                        completed: false,\n                        projectID: 0,\n                        taskID: 0,\n                        previousID: -1,\n                        \n            \n                    },\n                    {\n                        title: \"test task 2 proj 1\",\n                        details: \"random assortment of details\",\n                        dueDate: '12/16/2022',\n                        priority: 'medium',\n                        completed: false,\n                        projectID: 0,\n                        taskID: 1, \n                        previousID: 0,\n            \n                    }\n                ]\n            }\n        ];  \n        _localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addToStorage(projectsList)\n            \n    } else {\n        const projectsFromStorage = _localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getFromStorage('projects');\n        projectsList = projectsFromStorage;\n    }\n\n    function addProject(title,id){\n        let project = new Project(title,id);\n        let projectsList = JSON.parse(_localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getFromStorage('projects'));\n        projectsList.push(project);\n        _localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addToStorage(projectsList);\n        //add a dom show projects or tasks\n    }\n    function removeProject(projectID){\n        let projectsFromStorage = projects.getAllProjects();\n        //get project from projectID\n        let projectToRemove = projectsFromStorage.find(proj => proj.id === projectID)\n        let indexToRemove = projectsFromStorage.indexOf(projectToRemove);\n        //remove it from that project\n        if(indexToRemove > -1){\n            projectsFromStorage.splice(indexToRemove,1);\n            _localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addToStorage(projectsFromStorage);\n        } else {\n            console.error('could not remove because indexToRemove = ', indexToRemove)\n        }\n        \n    }\n    function editProject(title,projectID){\n        projectsList = getAllProjects();\n        let editProject = projectsList.find(proj => {\n            return parseInt(proj.id,10) === projectID;\n        })\n        let editProjectIndex = projectsList.indexOf(editProject)\n        projectsList[editProjectIndex].title = title;\n        _localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addToStorage(projectsList);\n    }\n    function getAllProjects(){\n        let projectsFromStorage = JSON.parse(_localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getFromStorage('projects'));\n        let tasksList = [];\n        let projectsList = [];\n        for (let i=0; i < projectsFromStorage.length; i++){\n            projectsList.push(projectsFromStorage[i]);\n            for(let j=0; j <projectsList[i].taskArr.length; j++){\n                tasksList.push(projectsList[i].taskArr[j])\n            }\n        }\n        return projectsList;\n    }\n    function addTaskToProject(projectIndex,taskObj){\n        projectsList = [];\n        projectsList = getAllProjects();\n        projectsList[projectIndex].taskArr.push(taskObj)\n        _localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addToStorage(projectsList);\n    }\n    function retrieveProject(projectID){\n        let projArr = getAllProjects();\n        let foundProj = projArr.find(proj => {\n            return parseInt(proj.id,10) === projectID;\n        })\n        return foundProj;\n    }\n    function findProjIDFromTitle(projectTitle){\n        projectsList = [];\n        projectsList = getAllProjects();\n        console.table(projectsList);\n        let filteredProject = projectsList.filter(project => String(project.title) == String(projectTitle) )\n        let foundProjID = filteredProject[0].id\n       if (foundProjID === null ){\n        console.error('could not find Project from Title');\n       }\n       else{\n        return  foundProjID;\n       }\n    }\n    return {\n        projectsList,\n        addProject,\n        removeProject,\n        editProject,\n        getAllProjects,\n        addTaskToProject,\n        retrieveProject,\n        findProjIDFromTitle\n    };\n})();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (projects);\n\n\n//# sourceURL=webpack:///./src/projects.js?");

/***/ }),

/***/ "./src/tasks.js":
/*!**********************!*\
  !*** ./src/tasks.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _localstorage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localstorage.js */ \"./src/localstorage.js\");\n/* harmony import */ var _projects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./projects.js */ \"./src/projects.js\");\n\n\n\nconst tasks = (() => {\n    //array to track all the tasks in order to generate their ID\n    let allTasksArray = []; \n    class Task {\n        constructor(title, details, dueDate, priority, projectID) {\n            this.title = title;\n            this.details = details;\n            this.dueDate = dueDate; \n            this.priority = priority;\n            this.completed = false;\n            this.projectID = projectID;\n            //no taskID as input\n            this.taskID = Task.getNextAvailTaskID();\n            this.previousID = this.taskID-1;\n\n        }\n        static getNextAvailTaskID(){\n            let allTasksArray = getAllTasks();\n            let onlyTaskIDsArray = allTasksArray.map(obj => obj.taskID).sort();\n            if (onlyTaskIDsArray.find[onlyTaskIDsArray.length-1]){\n                return null;\n            } else {\n                let nextAvailTaskID = onlyTaskIDsArray.length;\n                return nextAvailTaskID;\n            }\n        }\n    }\n\n    function addTask(title, details, dueDate, priority, projectID){\n        let task = new Task(title, details, dueDate, priority, projectID);\n        _projects_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addTaskToProject(projectID, task);\n    }\n    function removeTask(projectID,taskID){\n        let projectsFromStorage = _projects_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getAllProjects();\n        //search its taskArr for the taskID\n        let taskToRemove = projectsFromStorage[projectID].taskArr.find(task => task.taskID === taskID)\n        console.log('found the task to remove' , taskToRemove);\n        let indexToRemove = projectsFromStorage[projectID].taskArr.indexOf(taskToRemove);\n        console.log('index of the task we want to remove',  projectsFromStorage[projectID].taskArr.indexOf(taskToRemove)) //\n        //remove it from that project\n        if(indexToRemove > -1){\n            projectsFromStorage[projectID].taskArr.splice(indexToRemove,1);\n            _localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addToStorage(projectsFromStorage);\n        } else {\n            console.error('could not remove because indexToRemove = ', indexToRemove)\n        }\n        //add the new project array without that task to localstorage\n        \n    }\n    function editTask(taskTitle, details, dueDate, priority, oldProjectID, newProjectID, taskID){\n        let taskProjectsList = [];\n        taskProjectsList = _projects_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getAllProjects();\n        //Need to come up with a solution to move tasks between projects and have them maintain their project-link-index/task-link-index\n        if( newProjectID === oldProjectID){\n            //if they same then task should be the same task and can edit other form fields\n            let foundTask = taskProjectsList[oldProjectID].taskArr.find(task => task.taskID === taskID);\n            foundTask.title = String(taskTitle);\n            foundTask.details = String(details);\n            foundTask.dueDate = new Date(dueDate);\n            foundTask.priority = String(priority);\n            //old set statements taskProjectsList[oldProjectID].taskArr[taskID].title , .details ...etc\n            _localstorage_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addToStorage(taskProjectsList);\n        } else if(taskProjectsList[newProjectID].taskArr.find(obj => obj.taskID === taskID) === undefined){ \n            //should evaluate true since the .find function returns an undefined if the taskID is not found\n            //adds to the end new project, do before Removing! \n            let taskToEdit = retrieveTask(oldProjectID,taskID);\n            //needs an AddTaskToProject with a setter\n            taskToEdit.projectID = newProjectID;\n            _projects_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addTaskToProject(newProjectID,taskToEdit)\n            //remove from old project -TODO\n            removeTask(oldProjectID,taskID)\n            //update the project and task indexes in the dom - TODO\n        }\n    }\n    function getAllTasks(){\n        let projectsFromStorage = _projects_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getAllProjects();\n        let projectsArr = [];\n        let allTasksArray = [];\n        for (let i=0; i < projectsFromStorage.length; i++){\n            projectsArr.push(projectsFromStorage[i]);\n            for(let j=0; j <projectsArr[i].taskArr.length; j++){\n                allTasksArray.push(projectsArr[i].taskArr[j])\n            }\n        }\n        return allTasksArray;\n    }\n    function retrieveTask(dataProjectIndex, dataTaskIndex){\n        let taskArr = getAllTasks();\n        let foundTask = {};\n        foundTask = taskArr.find(function(task){\n            return parseInt(task.projectID,10) === dataProjectIndex && parseInt(task.taskID,10) === dataTaskIndex;\n        })\n        return foundTask;\n    }\n    //Testing Area\n    //localStorage.clearStorage()\n    \n    return {\n        addTask,\n        removeTask,\n        editTask,\n        getAllTasks,\n        retrieveTask\n    }\n})();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (tasks);\n\n//# sourceURL=webpack:///./src/tasks.js?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/tasks.js"));
/******/ }
]);